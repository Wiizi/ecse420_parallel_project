
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import image_utilities.FilteredImage;
import filters.linear_filters.BrightnessLinearFilter;
import filters.linear_filters.GammaCorrectionLinearFilter;
import filters.linear_filters.InversionLinearFilter;
import filters.linear_filters.RectificationLinearFilter;
import filters.linear_filters.BinarizeLinearFilter;
import filters.convolution_filters.BadBlurConvolutionFilter;
import filters.convolution_filters.EdgeDetectConvolutionFilter;
import filters.convolution_filters.EmbossConvolutionFilter;
import filters.convolution_filters.SharpenConvolutionFilter;
import filters.convolution_filters.DefaultConvolutionFilter;


import image_utilities.ImageRW;
import filters.Filter;
import javax.swing.JButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Andoni Roman
 */
public class mainUI extends javax.swing.JFrame {
    
    /**
     * GLOBALS
     */
    
    public int THREAD_NUM = 4;
    
    public float intensity = 1f;
    //Filter codes
    public int brightness = 0;
    public int gamma = 1;
    public int inverse = 2;
    public int rectification = 3;
    public int saturation = 4;
    public int convolution = 5;
    public int badblur = 6;
    public int edgedetect = 7;
    public int emboss = 8;
    public int sharpen = 9;
    public int binarize = 10;
    
    public String file_path = null;
    
    public int maximum_preview_height = 630; 
    
    public int maximum_preview_width = 920; 
    
    public BufferedImage loaded_original;
    
    public BufferedImage filtered_image;
    
    int currentFilter;
    
    ImageIcon original_icon;
    
    public int clicks;
    
    float filter_level = 0.0f;

    int img_width;
    int img_height;
    int new_img_width;
    int new_img_height;
    boolean saved = false;
   
    /**
     * Creates new form mainUI
     */
    public mainUI() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        editing_menu = new javax.swing.JFrame();
        image_label = new javax.swing.JLabel();
        filter_chooser_drop_box = new javax.swing.JComboBox<>();
        back_to_menu = new javax.swing.JButton();
        discard_button = new javax.swing.JButton();
        save_button = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        file_choice_button = new javax.swing.JButton();
        start_button = new javax.swing.JButton();
        text_field = new javax.swing.JTextField();
        bg = new javax.swing.JLabel();

        editing_menu.setMinimumSize(new java.awt.Dimension(1280, 800));
        editing_menu.setSize(new java.awt.Dimension(1280, 800));
        editing_menu.getContentPane().setLayout(null);

        image_label.setMaximumSize(new java.awt.Dimension(920, 630));
        image_label.setMinimumSize(new java.awt.Dimension(100, 100));
        editing_menu.getContentPane().add(image_label);
        image_label.setBounds(20, 100, 890, 520);

        filter_chooser_drop_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BinarizeLinear", "Brightness", "Gamma", "Inversion", "Rectification", "Saturation", "Convolution", "BadBlurConvolution", "EdgeDetectConvolution", "EmbossConvolution", "SharpenConvolution" }));
        filter_chooser_drop_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_chooser_drop_boxActionPerformed(evt);
            }
        });
        editing_menu.getContentPane().add(filter_chooser_drop_box);
        filter_chooser_drop_box.setBounds(920, 140, 320, 30);

        back_to_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_elements/back_to_main.png"))); // NOI18N
        back_to_menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                back_to_menuMouseClicked(evt);
            }
        });
        back_to_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_to_menuActionPerformed(evt);
            }
        });
        editing_menu.getContentPane().add(back_to_menu);
        back_to_menu.setBounds(20, 30, 230, 30);

        discard_button.setText("Discard");
        discard_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                discard_buttonMouseClicked(evt);
            }
        });
        editing_menu.getContentPane().add(discard_button);
        discard_button.setBounds(1040, 250, 80, 30);

        save_button.setText("Save");
        save_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                save_buttonMouseClicked(evt);
            }
        });
        editing_menu.getContentPane().add(save_button);
        save_button.setBounds(1040, 330, 80, 30);

        minus.setText("-");
        minus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minusMouseClicked(evt);
            }
        });
        editing_menu.getContentPane().add(minus);
        minus.setBounds(1150, 200, 40, 30);

        plus.setText("+");
        plus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                plusMouseClicked(evt);
            }
        });
        editing_menu.getContentPane().add(plus);
        plus.setBounds(970, 200, 40, 29);

        jLabel2.setFont(new java.awt.Font("Lucida Console", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Choose a filter");
        editing_menu.getContentPane().add(jLabel2);
        jLabel2.setBounds(990, 100, 280, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_elements/background_frosted.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(1280, 800));
        jLabel1.setMinimumSize(new java.awt.Dimension(1280, 800));
        editing_menu.getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1280, 800);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 800));
        setSize(new java.awt.Dimension(1280, 800));
        getContentPane().setLayout(null);

        title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_elements/title.png"))); // NOI18N
        getContentPane().add(title);
        title.setBounds(340, -10, 1010, 160);

        file_choice_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_elements/browse_button.png"))); // NOI18N
        file_choice_button.setText("jButton1");
        file_choice_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_choice_buttonActionPerformed(evt);
            }
        });
        getContentPane().add(file_choice_button);
        file_choice_button.setBounds(860, 410, 190, 40);

        start_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_elements/start_button.png"))); // NOI18N
        start_button.setText("jButton2");
        start_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                start_buttonMouseClicked(evt);
            }
        });
        getContentPane().add(start_button);
        start_button.setBounds(860, 510, 130, 40);

        text_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_fieldActionPerformed(evt);
            }
        });
        getContentPane().add(text_field);
        text_field.setBounds(310, 410, 540, 40);

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui_elements/background.jpg"))); // NOI18N
        bg.setText("jLabel1");
        getContentPane().add(bg);
        bg.setBounds(0, 0, 1290, 950);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Handler for the editing menu
     */
    private void handle_editing_menu()
    {
        Image img;        
        // open image file, analyze the sizes and try to fit
        try
        {
            loaded_original = ImageIO.read(new File(file_path));
            filtered_image = loaded_original;
            img_width = loaded_original.getWidth();
            new_img_width = img_width;
            System.out.println("Log: Image width: " + new_img_width);
            img_height = loaded_original.getHeight();
            new_img_height = img_height;
            System.out.println("Log: Image height: " + new_img_height);
            
            //avoid overfilling the page, keep the sizes smaller than thresholds 
            //decision is made on mutually exclusive cases
            if (img_width > maximum_preview_width || img_height > maximum_preview_height)
            {
                if(img_width > maximum_preview_width && !(img_height > maximum_preview_height))
                {
                    System.out.println("Log: Image too big for preview, resizing based on width!");
                    double proportion = (double)img_width/(double)maximum_preview_width;
                    double remainder = 1 - proportion;
                    new_img_width = (int) ((int) img_width * remainder);
                    new_img_height = (int) ((int) img_height * remainder);
                }
                else if (img_height > maximum_preview_height && !(img_width > maximum_preview_width))
                {
                    System.out.println("Log: Image too big for preview, resizing! base on height");
                    double proportion = (double)img_height/(double)maximum_preview_height;
                    double remainder = 1 - proportion;
                    new_img_width = (int) ((int) img_width * remainder);
                    new_img_height = (int) ((int) img_height * remainder);
                }
                else if (img_height > maximum_preview_height && img_width > maximum_preview_width)
                {
                    System.out.println("Log: Image too big for preview, resizing! base on height AND width");
                    double proportion_width = (double)img_width/(double)maximum_preview_width;
                    System.out.println("Log: Prop width:" + proportion_width);

                    double proportion_height = (double)img_height/(double)maximum_preview_height;
                    System.out.println("Log: Prop height:" + proportion_height);


                    
                    double biggest = proportion_width;
                    if (proportion_width<proportion_height)
                    {
                        biggest = proportion_height;
                    }
                    
                    System.out.println("Biggest prop chosen: " + biggest);
                    double remainder = biggest - 1;
                    remainder = 1 - remainder;
                    System.out.println("Remainder: " + remainder);
                    new_img_width = (int) ((int) img_width * remainder);
                    new_img_height = (int) ((int) img_height * remainder);
                    System.out.println("Log: NEW height:" + new_img_height);
                    System.out.println("Log: NEW width:" + new_img_width);
         
                }
            }
            
            //SET LABLE
            Dimension size = new Dimension(maximum_preview_width, maximum_preview_height);
            image_label.setSize(size);

            image_label.setLayout(new GridBagLayout());
            
            original_icon = new ImageIcon(file_path);
            Image image = original_icon.getImage(); // transform it 
            Image newimg = image.getScaledInstance(new_img_width, new_img_height,  java.awt.Image.SCALE_SMOOTH);
            original_icon = new ImageIcon(newimg);
            image_label.setIcon(original_icon);
        }
        catch (IOException ex)
        {
            System.out.println("Log: ERROR OPENING THE FILE....CRITICAL.");
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }
    /**
     * Simply shows the path of the chosen file
     * @param evt 
     */
    private void text_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_text_fieldActionPerformed
    
    /**
     * File chooser handler
     * @param evt 
     */
    private void file_choice_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_choice_buttonActionPerformed
        // TODO add your handling code here:
        System.out.println("Log: Choosing an image....");
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File chosen_image = chooser.getSelectedFile();
        if(chosen_image != null)
        {
            System.out.println("Log: Image chosen successfully!.");
            file_path = chosen_image.getAbsolutePath();
            text_field.setText(file_path);
        }
        else
        {
            System.out.println("Log: Cancelled action on FileChoser.");
        }
    }//GEN-LAST:event_file_choice_buttonActionPerformed

    private void start_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_start_buttonMouseClicked
        // TODO add your handling code here:

        if(file_path != null)
        {
            String[] tokens = file_path.split("\\.(?=[^\\.]+$)");
            String extension = tokens[tokens.length - 1];
            boolean is_a_png = false;

            if (extension.equals("png"))
            {
                is_a_png = true;
                editing_menu.setVisible(true);
                this.setVisible(false);
                System.out.println("Log: Image chosen @ " + file_path);
   
            }

            if(is_a_png)
            {
                System.out.println("Log: Valid file, proceed to filtering!");
                handle_editing_menu();
            }
            else
            {
                System.out.println("Log: ERROR: Invalid file extention.");
                JOptionPane.showMessageDialog(rootPane, "Invalid file extention. Make sure you select a PNG image.");
            }
        }
        else
        {
            System.out.println("Log: ERROR: Can't start, no file found!!!!");
            JOptionPane.showMessageDialog(rootPane, "No image was selected! Please select an image.");
        }
    }//GEN-LAST:event_start_buttonMouseClicked

    private void back_to_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_to_menuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_back_to_menuActionPerformed
    
    /**
     * Back to the main menu button handler.
     * @param evt 
     */
    private void back_to_menuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_to_menuMouseClicked
        file_path = null;
        text_field.setText(null);
        editing_menu.setVisible(false);
        System.out.println("Log: Back to main!");
        this.setVisible(true);
        image_label.removeAll();
    }//GEN-LAST:event_back_to_menuMouseClicked

    /**
     * Do action on select list for filter choices
     * @param evt 
     */
    private void filter_chooser_drop_boxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_chooser_drop_boxActionPerformed
       
       //drop filter clicks and intensity back to 0 
       clicks = 0;
       filter_level = 0.0f;
       
       String chosen_filter = filter_chooser_drop_box.getSelectedItem().toString();
       System.out.println("Log: We chose " + chosen_filter);
       
       if (chosen_filter.equals("Brightness"))
       {
           currentFilter = brightness;
       }
       else if (chosen_filter.equals("Gamma"))
       {
           currentFilter = gamma;    
       }
       else if (chosen_filter.equals("Inversion"))
       {
           currentFilter = inverse;      
       }
       else if (chosen_filter.equals("Rectification"))
       {
           currentFilter = rectification;   
       }
       else if (chosen_filter.equals("Saturation"))
       {
           currentFilter = saturation;         
       }
       else if (chosen_filter.equals("Convolution"))
       {
           currentFilter = convolution;        
       }
       else if (chosen_filter.equals("BadBlurConvolution"))
       {
           currentFilter = badblur;       
       }
       else if (chosen_filter.equals("EdgeDetectConvolution"))
       {
           currentFilter = edgedetect;         
       }
       else if (chosen_filter.equals("EmbossConvolution"))
       {
           currentFilter = emboss;         
       }
       else if (chosen_filter.equals("SharpenConvolution"))
       {
           currentFilter = sharpen;        
       }
       else if (chosen_filter.equals("BinarizeLinear"))
       {
           currentFilter = binarize;
       }
       
    }//GEN-LAST:event_filter_chooser_drop_boxActionPerformed

    /**
     * Refresh the preview image
     */
    private void refreshPreview(BufferedImage new_Image)
    {
        ImageRW.saveImage(new_Image, "temp");
        System.out.println("Log: Preview refreshed");
       
        Dimension size = new Dimension(maximum_preview_width, maximum_preview_height);
        image_label.setSize(size);
        image_label.setLayout(new GridBagLayout());
        ImageIcon icon = new ImageIcon("temp.png");
        Image image = icon.getImage(); // transform it 
        Image newimg = image.getScaledInstance(new_img_width, new_img_height,  java.awt.Image.SCALE_SMOOTH);
        icon = new ImageIcon(newimg);
        image_label.setIcon(icon);

    }
    
    /**
     * Handle discard event
     * @param evt 
     */
    private void discard_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discard_buttonMouseClicked
        // TODO add your handling code here:
        System.out.println("Log: Cancelling all changes..");
        image_label.setIcon(original_icon);
        try {
            filtered_image = ImageIO.read(new File(file_path));
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            loaded_original = ImageIO.read(new File(file_path));
        } catch (IOException ex) {
            Logger.getLogger(mainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        clicks = 1;
        filter_level = 0.0f;
        System.out.println("Log: Cancelling all changes..DONE");
        
    }//GEN-LAST:event_discard_buttonMouseClicked

    /**
     * Handler to increase or decrease the filter application on the image.
     * Includes preview updates.
     * @param evt 
     */
    private void plusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plusMouseClicked
        
        Filter filt;
        JButton b = null;
        String sign = "";
          
        Object clicked_obj = evt.getSource();
        
        if(clicked_obj instanceof JButton)
        {
            b = (JButton)clicked_obj;
        }
        
        if(b != null)
        {
           sign = b.getText();
        }
        
        if(sign.equals("+"))
        {
            filter_level = filter_level + intensity;
        }
        else
        {
            filter_level = filter_level - intensity;
        }
        
        // Default is no level is provided
        if (filter_level == 0.0f)
        {
            refreshPreview(loaded_original);
        }

        if(currentFilter == brightness)
        {
            filt = new BrightnessLinearFilter(THREAD_NUM, filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied brightness filter!");
            refreshPreview(image_out);
        }
        
        if(currentFilter == gamma)
        {
            filt = new GammaCorrectionLinearFilter(THREAD_NUM, filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied gamma filter!");
            refreshPreview(image_out);
        }
        
        if(currentFilter == inverse)
        {
            filt = new InversionLinearFilter(THREAD_NUM, filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied inversion filter!");
            refreshPreview(image_out);
        }
        
        if(currentFilter == rectification)
        {
            filt = new RectificationLinearFilter(THREAD_NUM,filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied rectification filter!");
            refreshPreview(image_out);
        }
        
//        if(currentFilter == saturation)
//        {
//            filt = new SaturationLinearFilter(THREAD_NUM,filter_level);
//            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
//            BufferedImage image_out = filteredImage.getFilteredImage();
//            filtered_image = image_out;
//            
//            System.out.println("Log: Applied rectification filter!");
//            refreshPreview(image_out);
//        }

        if(currentFilter == badblur)
        {
            filt = new BadBlurConvolutionFilter(THREAD_NUM,filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied bad blur filter!");
            refreshPreview(image_out);
        }
        
        if(currentFilter == edgedetect)
        {
            filt = new EdgeDetectConvolutionFilter(THREAD_NUM,filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied edge detect filter!");
            refreshPreview(image_out);
        }
        
        if(currentFilter == emboss)
        {
            filt = new EmbossConvolutionFilter(THREAD_NUM,filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied emboss filter!");
            refreshPreview(image_out);
        }
        
        if(currentFilter == sharpen)
        {
            filt = new SharpenConvolutionFilter(THREAD_NUM,filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied sharpening filter!");
            refreshPreview(image_out);
        }
            
        if(currentFilter == convolution)
        {
            filt = new DefaultConvolutionFilter(THREAD_NUM);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied simple convolution filter!");
            refreshPreview(image_out);
        }
        if(currentFilter == binarize)
        {
            filt = new BinarizeLinearFilter(THREAD_NUM, filter_level);
            FilteredImage filteredImage = new FilteredImage(loaded_original, filt);
            BufferedImage image_out = filteredImage.getFilteredImage();
            filtered_image = image_out;
            
            System.out.println("Log: Applied binarize filter!");
            refreshPreview(image_out);
        }
        
                 
         clicks++;
    }//GEN-LAST:event_plusMouseClicked

    /**
     * Handler for image saver.
     * @param evt 
     */
    private void save_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_buttonMouseClicked
        
        String file_name_to_save = file_path.substring(0, file_path.lastIndexOf('.')) + "_filtered";
        ImageRW.saveImage(filtered_image, file_name_to_save);
        System.out.println("Log: Saved image!");
        JOptionPane.showMessageDialog(rootPane, "Filtered image saved successfully at " + file_name_to_save + ".png");
    }//GEN-LAST:event_save_buttonMouseClicked
    
    /**
     * Reuse the existing mouse clicker but with different event to signal a pressed '-'
     * @param evt 
     */
    private void minusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minusMouseClicked
        plusMouseClicked(evt);
    }//GEN-LAST:event_minusMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back_to_menu;
    private javax.swing.JLabel bg;
    private javax.swing.JButton discard_button;
    private javax.swing.JFrame editing_menu;
    private javax.swing.JButton file_choice_button;
    private javax.swing.JComboBox<String> filter_chooser_drop_box;
    private javax.swing.JLabel image_label;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton minus;
    private javax.swing.JButton plus;
    private javax.swing.JButton save_button;
    private javax.swing.JButton start_button;
    private javax.swing.JTextField text_field;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
